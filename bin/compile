#!/usr/bin/env bash

set -eo pipefail

BUILD_DIR=$1
PROFILE_PATH="$BUILD_DIR/.profile.d"
VENDOR_DIR=vendor/luajit

mkdir -p "$BUILD_DIR/bin/"
cp "bin/nginx-$STACK" "$BUILD_DIR/bin/nginx"
nginx_full=$(LD_LIBRARY_PATH=lib/$STACK ./bin/nginx-$STACK -V 2>&1)
echo "-----> nginx-buildpack DEBUG1: $nginx_full"
# For some unknown reason the following command may randomly fail
# see incy-app issue #4044 for details
set +eo pipefail
nginx_first_row=$(echo "$nginx_full" | head -n 1)
echo "-----> nginx-buildpack DEBUG2(errors ignored): $nginx_first_row"
set -eo pipefail
nginx_version=$(echo "$nginx_first_row" | awk '{ print $NF }')
echo "-----> nginx-buildpack DEBUG3: $nginx_version"
echo "-----> nginx-buildpack: Installed ${nginx_version} to app/bin"

# The ERB templating feature requires a Ruby install at runtime, for the `erb` command.
# As of Heroku-22, there is no system Ruby installation in the stack image, so if the
# app doesn't already have the Ruby buildpack set before this one, we have to vendor
# our own copy of Ruby and ensure it's on PATH at runtime.
if ! command -v erb &> /dev/null; then
  echo "-----> nginx-buildpack: An existing Ruby installation was not found (required for erb template support)"
  ruby_version="3.1.2"
  ruby_url="https://heroku-buildpack-ruby.s3.us-east-1.amazonaws.com/${STACK}/ruby-${ruby_version}.tgz"
  vendored_ruby_dir=".heroku-buildpack-nginx/ruby"
  mkdir -p "${BUILD_DIR}/${vendored_ruby_dir}"

  if ! curl --silent --show-error --fail --retry 3 --retry-connrefused --connect-timeout 5 "${ruby_url}" | tar -zxC "${BUILD_DIR}/${vendored_ruby_dir}"; then
    echo "     ! Failed to download Ruby from '${ruby_url}'" >&2
    exit 1
  fi

  mkdir -p "${BUILD_DIR}/.profile.d"
  # Deliberately pick the same profile.d script filepath as the Ruby buildpack,
  # so if the Ruby buildpack comes after this one, it will overwrite this script.
  echo "export PATH=\"\${HOME}/${vendored_ruby_dir}/bin:\${PATH}\"" > "${BUILD_DIR}/.profile.d/ruby.sh"

  echo "-----> nginx-buildpack: Installed Ruby ${ruby_version}"
fi

cp bin/start-nginx "$BUILD_DIR/bin/"
echo '-----> nginx-buildpack: Added start-nginx to app/bin'

mkdir -p $BUILD_DIR/$VENDOR_DIR
cp lib/$STACK/* "$BUILD_DIR/$VENDOR_DIR"
echo "-----> nginx-buildpack: Installed libraries to app/$VENDOR_DIR"

mkdir -p $PROFILE_PATH
echo "export LD_LIBRARY_PATH=\"\$LD_LIBRARY_PATH:\$HOME/$VENDOR_DIR\"" >> $PROFILE_PATH/luajit.sh
echo '-----> nginx-buildpack: Exported LD_LIBRARY_PATH'

mkdir -p "$BUILD_DIR/config"

cp config/mime.types "$BUILD_DIR/config/"
echo '-----> nginx-buildpack: Default mime.types copied to app/config/'

if [[ ! -f $BUILD_DIR/config/nginx.conf.erb ]]; then
	cp config/nginx.conf.erb "$BUILD_DIR/config/"
	echo '-----> nginx-buildpack: Default config copied to app/config.'
else
	echo '-----> nginx-buildpack: Custom config found in app/config.'
fi
exit 0
